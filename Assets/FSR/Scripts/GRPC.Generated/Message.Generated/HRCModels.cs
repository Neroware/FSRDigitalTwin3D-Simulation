// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/DTO/HRCModels.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FSR.DigitalTwin.App.GRPC.Process.HRC {

  /// <summary>Holder for reflection information generated from Protos/DTO/HRCModels.proto</summary>
  public static partial class HRCModelsReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/DTO/HRCModels.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HRCModelsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpQcm90b3MvRFRPL0hSQ01vZGVscy5wcm90bxIYRlNSLkRpZ2l0YWxUd2lu",
            "LkFwcC5HUlBDIqABChdGdW5jdGlvblByb3BlcnR5RGF0YURUTxISCgpmdW5j",
            "dGlvbklkGAEgASgJEhUKDXByb2NlZHVyZU5hbWUYAiABKAkSFgoOcHJvY2Vk",
            "dXJlRGVzY3IYAyABKAkSEwoLcHJvY2VkdXJlSWQYBCABKAMSEAoIZHVyYXRp",
            "b24YBSABKAESGwoTZHVyYXRpb25VbmNlcnRhaW50eRgGIAEoASJ5ChVGdW5j",
            "dGlvbk9iamVjdERhdGFEVE8SEgoKZnVuY3Rpb25JZBgBIAEoCRIOCgZ0YXJn",
            "ZXQYAiABKAkSFQoNc3RhcnRMb2NhdGlvbhgDIAEoCRITCgtlbmRMb2NhdGlv",
            "bhgEIAEoCRIQCghsb2NhdGlvbhgFIAEoCSLeAgoKSFJDVGFza0RUTxIOCgZ0",
            "YXNrSWQYASABKAkSDAoEdHlwZRgCIAEoCRIOCgZ0YXJnZXQYAyABKAkSDAoE",
            "bmFtZRgEIAEoCRIKCgJpZBgFIAEoAxITCgtkZXNjcmlwdGlvbhgGIAEoCRIM",
            "CgRnb2FsGAcgASgJEhUKDXN0YXJ0TG9jYXRpb24YCCABKAkSEwoLZW5kTG9j",
            "YXRpb24YCSABKAkSEAoIbG9jYXRpb24YCiABKAkSMgoFYWdlbnQYCyABKA4y",
            "Iy5GU1IuRGlnaXRhbFR3aW4uQXBwLkdSUEMuQWdlbnRUeXBlEhMKC21pbkR1",
            "cmF0aW9uGAwgASgCEhMKC21heER1cmF0aW9uGA0gASgCEhcKD2F2ZXJhZ2VE",
            "dXJhdGlvbhgOIAEoAhIbChNkdXJhdGlvblVuY2VydGFpbnR5GA8gASgCEhMK",
            "C3N1Y2Nlc3NSYXRlGBAgASgBIscBCgtIUkNNb2RlbERUTxIPCgdob3Jpem9u",
            "GAEgASgCEjMKBXRhc2tzGAIgAygLMiQuRlNSLkRpZ2l0YWxUd2luLkFwcC5H",
            "UlBDLkhSQ1Rhc2tEVE8SOAoKcm9ib3RUYXNrcxgDIAMoCzIkLkZTUi5EaWdp",
            "dGFsVHdpbi5BcHAuR1JQQy5IUkNUYXNrRFRPEjgKCmh1bWFuVGFza3MYBCAD",
            "KAsyJC5GU1IuRGlnaXRhbFR3aW4uQXBwLkdSUEMuSFJDVGFza0RUTyJPCgdH",
            "b2FsRFRPEg4KBmdvYWxJZBgBIAEoCRI0CgdtZXRob2RzGAIgAygLMiMuRlNS",
            "LkRpZ2l0YWxUd2luLkFwcC5HUlBDLk1ldGhvZERUTyL1AQoWSW50ZXJhY3Rp",
            "b25Nb2RhbGl0eURUTxIKCgJpZBgBIAEoCRI/CgR0eXBlGAIgASgOMjEuRlNS",
            "LkRpZ2l0YWxUd2luLkFwcC5HUlBDLkludGVyYWN0aW9uTW9kYWxpdHlUeXBl",
            "EhEKCWZ1bmN0aW9uMRgDIAEoCRIzCgZhZ2VudDEYBCABKA4yIy5GU1IuRGln",
            "aXRhbFR3aW4uQXBwLkdSUEMuQWdlbnRUeXBlEhEKCWZ1bmN0aW9uMhgFIAEo",
            "CRIzCgZhZ2VudDIYBiABKA4yIy5GU1IuRGlnaXRhbFR3aW4uQXBwLkdSUEMu",
            "QWdlbnRUeXBlIoABCgdUYXNrRFRPEg4KBnRhc2tJZBgBIAEoCRIwCgR0eXBl",
            "GAIgASgOMiIuRlNSLkRpZ2l0YWxUd2luLkFwcC5HUlBDLlRhc2tUeXBlEjMK",
            "CHN1YlRhc2tzGAMgAygLMiEuRlNSLkRpZ2l0YWxUd2luLkFwcC5HUlBDLlRh",
            "c2tEVE8iqwEKCU1ldGhvZERUTxIOCgZnb2FsSWQYASABKAkSPQoFZ3JhcGgY",
            "AiADKAsyLi5GU1IuRGlnaXRhbFR3aW4uQXBwLkdSUEMuTWV0aG9kRFRPLkdy",
            "YXBoRW50cnkaTwoKR3JhcGhFbnRyeRILCgNrZXkYASABKAkSMAoFdmFsdWUY",
            "AiABKAsyIS5GU1IuRGlnaXRhbFR3aW4uQXBwLkdSUEMuVGFza0RUTzoCOAEi",
            "WgoIQWdlbnREVE8SCgoCaWQYASABKAkSNAoEdHlwZRgCIAEoDjImLkZTUi5E",
            "aWdpdGFsVHdpbi5BcHAuR1JQQy5IUkNBZ2VudFR5cGUSDAoEbmFtZRgDIAEo",
            "CSpLCglBZ2VudFR5cGUSEgoOQUdFTlRfVFlQRV9BTlkQABIUChBBR0VOVF9U",
            "WVBFX0hVTUFOEAESFAoQQUdFTlRfVFlQRV9ST0JPVBACKp4BCgxIUkNBZ2Vu",
            "dFR5cGUSHAoYSFJDX0FHRU5UX1RZUEVfVU5ERUZJTkVEEAASGAoUSFJDX0FH",
            "RU5UX1RZUEVfSFVNQU4QARIYChRIUkNfQUdFTlRfVFlQRV9ST0JPVBACEiIK",
            "HkhSQ19BR0VOVF9UWVBFX1dPUktFUl9PUEVSQVRPUhADEhgKFEhSQ19BR0VO",
            "VF9UWVBFX0NPQk9UEAQqqwEKCFRhc2tUeXBlEhIKDlRBU0tfVFlQRV9UQVNL",
            "EAASEgoOVEFTS19UWVBFX0dPQUwQARIUChBUQVNLX1RZUEVfTUVUSE9EEAIS",
            "FQoRVEFTS19UWVBFX0NPTVBMRVgQAxIYChRUQVNLX1RZUEVfQ09OSlVDVElP",
            "ThAEEhgKFFRBU0tfVFlQRV9ESVNKVUNUSU9OEAUSFgoSVEFTS19UWVBFX0ZV",
            "TkNUSU9OEAYq6AEKF0ludGVyYWN0aW9uTW9kYWxpdHlUeXBlEiIKHklOVEVS",
            "QUNUSU9OX01PREFMSVRZX1RZUEVfTk9ORRAAEikKJUlOVEVSQUNUSU9OX01P",
            "REFMSVRZX1RZUEVfSU5ERVBFTkRFTlQQARIoCiRJTlRFUkFDVElPTl9NT0RB",
            "TElUWV9UWVBFX1NFUVVFTlRJQUwQAhIqCiZJTlRFUkFDVElPTl9NT0RBTElU",
            "WV9UWVBFX1NJTVVMVEFORU9VUxADEigKJElOVEVSQUNUSU9OX01PREFMSVRZ",
            "X1RZUEVfU1VQUE9SVElWRRAEQieqAiRGU1IuRGlnaXRhbFR3aW4uQXBwLkdS",
            "UEMuUHJvY2Vzcy5IUkNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentType), typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCAgentType), typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskType), typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO), global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO.Parser, new[]{ "FunctionId", "ProcedureName", "ProcedureDescr", "ProcedureId", "Duration", "DurationUncertainty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO), global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO.Parser, new[]{ "FunctionId", "Target", "StartLocation", "EndLocation", "Location" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO), global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO.Parser, new[]{ "TaskId", "Type", "Target", "Name", "Id", "Description", "Goal", "StartLocation", "EndLocation", "Location", "Agent", "MinDuration", "MaxDuration", "AverageDuration", "DurationUncertainty", "SuccessRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelDTO), global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelDTO.Parser, new[]{ "Horizon", "Tasks", "RobotTasks", "HumanTasks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO), global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO.Parser, new[]{ "GoalId", "Methods" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO), global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO.Parser, new[]{ "Id", "Type", "Function1", "Agent1", "Function2", "Agent2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO), global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO.Parser, new[]{ "TaskId", "Type", "SubTasks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.MethodDTO), global::FSR.DigitalTwin.App.GRPC.Process.HRC.MethodDTO.Parser, new[]{ "GoalId", "Graph" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentDTO), global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentDTO.Parser, new[]{ "Id", "Type", "Name" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AgentType {
    [pbr::OriginalName("AGENT_TYPE_ANY")] Any = 0,
    [pbr::OriginalName("AGENT_TYPE_HUMAN")] Human = 1,
    [pbr::OriginalName("AGENT_TYPE_ROBOT")] Robot = 2,
  }

  public enum HRCAgentType {
    [pbr::OriginalName("HRC_AGENT_TYPE_UNDEFINED")] Undefined = 0,
    [pbr::OriginalName("HRC_AGENT_TYPE_HUMAN")] Human = 1,
    [pbr::OriginalName("HRC_AGENT_TYPE_ROBOT")] Robot = 2,
    [pbr::OriginalName("HRC_AGENT_TYPE_WORKER_OPERATOR")] WorkerOperator = 3,
    [pbr::OriginalName("HRC_AGENT_TYPE_COBOT")] Cobot = 4,
  }

  public enum TaskType {
    [pbr::OriginalName("TASK_TYPE_TASK")] Task = 0,
    [pbr::OriginalName("TASK_TYPE_GOAL")] Goal = 1,
    [pbr::OriginalName("TASK_TYPE_METHOD")] Method = 2,
    [pbr::OriginalName("TASK_TYPE_COMPLEX")] Complex = 3,
    [pbr::OriginalName("TASK_TYPE_CONJUCTION")] Conjuction = 4,
    [pbr::OriginalName("TASK_TYPE_DISJUCTION")] Disjuction = 5,
    [pbr::OriginalName("TASK_TYPE_FUNCTION")] Function = 6,
  }

  public enum InteractionModalityType {
    [pbr::OriginalName("INTERACTION_MODALITY_TYPE_NONE")] None = 0,
    [pbr::OriginalName("INTERACTION_MODALITY_TYPE_INDEPENDENT")] Independent = 1,
    [pbr::OriginalName("INTERACTION_MODALITY_TYPE_SEQUENTIAL")] Sequential = 2,
    [pbr::OriginalName("INTERACTION_MODALITY_TYPE_SIMULTANEOUS")] Simultaneous = 3,
    [pbr::OriginalName("INTERACTION_MODALITY_TYPE_SUPPORTIVE")] Supportive = 4,
  }

  #endregion

  #region Messages
  public sealed partial class FunctionPropertyDataDTO : pb::IMessage<FunctionPropertyDataDTO> {
    private static readonly pb::MessageParser<FunctionPropertyDataDTO> _parser = new pb::MessageParser<FunctionPropertyDataDTO>(() => new FunctionPropertyDataDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FunctionPropertyDataDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionPropertyDataDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionPropertyDataDTO(FunctionPropertyDataDTO other) : this() {
      functionId_ = other.functionId_;
      procedureName_ = other.procedureName_;
      procedureDescr_ = other.procedureDescr_;
      procedureId_ = other.procedureId_;
      duration_ = other.duration_;
      durationUncertainty_ = other.durationUncertainty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionPropertyDataDTO Clone() {
      return new FunctionPropertyDataDTO(this);
    }

    /// <summary>Field number for the "functionId" field.</summary>
    public const int FunctionIdFieldNumber = 1;
    private string functionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FunctionId {
      get { return functionId_; }
      set {
        functionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "procedureName" field.</summary>
    public const int ProcedureNameFieldNumber = 2;
    private string procedureName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcedureName {
      get { return procedureName_; }
      set {
        procedureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "procedureDescr" field.</summary>
    public const int ProcedureDescrFieldNumber = 3;
    private string procedureDescr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcedureDescr {
      get { return procedureDescr_; }
      set {
        procedureDescr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "procedureId" field.</summary>
    public const int ProcedureIdFieldNumber = 4;
    private long procedureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProcedureId {
      get { return procedureId_; }
      set {
        procedureId_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 5;
    private double duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "durationUncertainty" field.</summary>
    public const int DurationUncertaintyFieldNumber = 6;
    private double durationUncertainty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DurationUncertainty {
      get { return durationUncertainty_; }
      set {
        durationUncertainty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FunctionPropertyDataDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FunctionPropertyDataDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FunctionId != other.FunctionId) return false;
      if (ProcedureName != other.ProcedureName) return false;
      if (ProcedureDescr != other.ProcedureDescr) return false;
      if (ProcedureId != other.ProcedureId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DurationUncertainty, other.DurationUncertainty)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FunctionId.Length != 0) hash ^= FunctionId.GetHashCode();
      if (ProcedureName.Length != 0) hash ^= ProcedureName.GetHashCode();
      if (ProcedureDescr.Length != 0) hash ^= ProcedureDescr.GetHashCode();
      if (ProcedureId != 0L) hash ^= ProcedureId.GetHashCode();
      if (Duration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Duration);
      if (DurationUncertainty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DurationUncertainty);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FunctionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FunctionId);
      }
      if (ProcedureName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProcedureName);
      }
      if (ProcedureDescr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProcedureDescr);
      }
      if (ProcedureId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ProcedureId);
      }
      if (Duration != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Duration);
      }
      if (DurationUncertainty != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(DurationUncertainty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FunctionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionId);
      }
      if (ProcedureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcedureName);
      }
      if (ProcedureDescr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcedureDescr);
      }
      if (ProcedureId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcedureId);
      }
      if (Duration != 0D) {
        size += 1 + 8;
      }
      if (DurationUncertainty != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FunctionPropertyDataDTO other) {
      if (other == null) {
        return;
      }
      if (other.FunctionId.Length != 0) {
        FunctionId = other.FunctionId;
      }
      if (other.ProcedureName.Length != 0) {
        ProcedureName = other.ProcedureName;
      }
      if (other.ProcedureDescr.Length != 0) {
        ProcedureDescr = other.ProcedureDescr;
      }
      if (other.ProcedureId != 0L) {
        ProcedureId = other.ProcedureId;
      }
      if (other.Duration != 0D) {
        Duration = other.Duration;
      }
      if (other.DurationUncertainty != 0D) {
        DurationUncertainty = other.DurationUncertainty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FunctionId = input.ReadString();
            break;
          }
          case 18: {
            ProcedureName = input.ReadString();
            break;
          }
          case 26: {
            ProcedureDescr = input.ReadString();
            break;
          }
          case 32: {
            ProcedureId = input.ReadInt64();
            break;
          }
          case 41: {
            Duration = input.ReadDouble();
            break;
          }
          case 49: {
            DurationUncertainty = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FunctionObjectDataDTO : pb::IMessage<FunctionObjectDataDTO> {
    private static readonly pb::MessageParser<FunctionObjectDataDTO> _parser = new pb::MessageParser<FunctionObjectDataDTO>(() => new FunctionObjectDataDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FunctionObjectDataDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionObjectDataDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionObjectDataDTO(FunctionObjectDataDTO other) : this() {
      functionId_ = other.functionId_;
      target_ = other.target_;
      startLocation_ = other.startLocation_;
      endLocation_ = other.endLocation_;
      location_ = other.location_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionObjectDataDTO Clone() {
      return new FunctionObjectDataDTO(this);
    }

    /// <summary>Field number for the "functionId" field.</summary>
    public const int FunctionIdFieldNumber = 1;
    private string functionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FunctionId {
      get { return functionId_; }
      set {
        functionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private string target_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startLocation" field.</summary>
    public const int StartLocationFieldNumber = 3;
    private string startLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartLocation {
      get { return startLocation_; }
      set {
        startLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endLocation" field.</summary>
    public const int EndLocationFieldNumber = 4;
    private string endLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndLocation {
      get { return endLocation_; }
      set {
        endLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 5;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FunctionObjectDataDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FunctionObjectDataDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FunctionId != other.FunctionId) return false;
      if (Target != other.Target) return false;
      if (StartLocation != other.StartLocation) return false;
      if (EndLocation != other.EndLocation) return false;
      if (Location != other.Location) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FunctionId.Length != 0) hash ^= FunctionId.GetHashCode();
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      if (StartLocation.Length != 0) hash ^= StartLocation.GetHashCode();
      if (EndLocation.Length != 0) hash ^= EndLocation.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FunctionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FunctionId);
      }
      if (Target.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Target);
      }
      if (StartLocation.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StartLocation);
      }
      if (EndLocation.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EndLocation);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FunctionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionId);
      }
      if (Target.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (StartLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartLocation);
      }
      if (EndLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndLocation);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FunctionObjectDataDTO other) {
      if (other == null) {
        return;
      }
      if (other.FunctionId.Length != 0) {
        FunctionId = other.FunctionId;
      }
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
      if (other.StartLocation.Length != 0) {
        StartLocation = other.StartLocation;
      }
      if (other.EndLocation.Length != 0) {
        EndLocation = other.EndLocation;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FunctionId = input.ReadString();
            break;
          }
          case 18: {
            Target = input.ReadString();
            break;
          }
          case 26: {
            StartLocation = input.ReadString();
            break;
          }
          case 34: {
            EndLocation = input.ReadString();
            break;
          }
          case 42: {
            Location = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HRCTaskDTO : pb::IMessage<HRCTaskDTO> {
    private static readonly pb::MessageParser<HRCTaskDTO> _parser = new pb::MessageParser<HRCTaskDTO>(() => new HRCTaskDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HRCTaskDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HRCTaskDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HRCTaskDTO(HRCTaskDTO other) : this() {
      taskId_ = other.taskId_;
      type_ = other.type_;
      target_ = other.target_;
      name_ = other.name_;
      id_ = other.id_;
      description_ = other.description_;
      goal_ = other.goal_;
      startLocation_ = other.startLocation_;
      endLocation_ = other.endLocation_;
      location_ = other.location_;
      agent_ = other.agent_;
      minDuration_ = other.minDuration_;
      maxDuration_ = other.maxDuration_;
      averageDuration_ = other.averageDuration_;
      durationUncertainty_ = other.durationUncertainty_;
      successRate_ = other.successRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HRCTaskDTO Clone() {
      return new HRCTaskDTO(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private string target_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 7;
    private string goal_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Goal {
      get { return goal_; }
      set {
        goal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startLocation" field.</summary>
    public const int StartLocationFieldNumber = 8;
    private string startLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartLocation {
      get { return startLocation_; }
      set {
        startLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endLocation" field.</summary>
    public const int EndLocationFieldNumber = 9;
    private string endLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndLocation {
      get { return endLocation_; }
      set {
        endLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 10;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "agent" field.</summary>
    public const int AgentFieldNumber = 11;
    private global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentType agent_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentType Agent {
      get { return agent_; }
      set {
        agent_ = value;
      }
    }

    /// <summary>Field number for the "minDuration" field.</summary>
    public const int MinDurationFieldNumber = 12;
    private float minDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinDuration {
      get { return minDuration_; }
      set {
        minDuration_ = value;
      }
    }

    /// <summary>Field number for the "maxDuration" field.</summary>
    public const int MaxDurationFieldNumber = 13;
    private float maxDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxDuration {
      get { return maxDuration_; }
      set {
        maxDuration_ = value;
      }
    }

    /// <summary>Field number for the "averageDuration" field.</summary>
    public const int AverageDurationFieldNumber = 14;
    private float averageDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AverageDuration {
      get { return averageDuration_; }
      set {
        averageDuration_ = value;
      }
    }

    /// <summary>Field number for the "durationUncertainty" field.</summary>
    public const int DurationUncertaintyFieldNumber = 15;
    private float durationUncertainty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DurationUncertainty {
      get { return durationUncertainty_; }
      set {
        durationUncertainty_ = value;
      }
    }

    /// <summary>Field number for the "successRate" field.</summary>
    public const int SuccessRateFieldNumber = 16;
    private double successRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SuccessRate {
      get { return successRate_; }
      set {
        successRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HRCTaskDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HRCTaskDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Type != other.Type) return false;
      if (Target != other.Target) return false;
      if (Name != other.Name) return false;
      if (Id != other.Id) return false;
      if (Description != other.Description) return false;
      if (Goal != other.Goal) return false;
      if (StartLocation != other.StartLocation) return false;
      if (EndLocation != other.EndLocation) return false;
      if (Location != other.Location) return false;
      if (Agent != other.Agent) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinDuration, other.MinDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDuration, other.MaxDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AverageDuration, other.AverageDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DurationUncertainty, other.DurationUncertainty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SuccessRate, other.SuccessRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Goal.Length != 0) hash ^= Goal.GetHashCode();
      if (StartLocation.Length != 0) hash ^= StartLocation.GetHashCode();
      if (EndLocation.Length != 0) hash ^= EndLocation.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Agent != 0) hash ^= Agent.GetHashCode();
      if (MinDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinDuration);
      if (MaxDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDuration);
      if (AverageDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AverageDuration);
      if (DurationUncertainty != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DurationUncertainty);
      if (SuccessRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SuccessRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Target.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Target);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Id != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Id);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (Goal.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Goal);
      }
      if (StartLocation.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(StartLocation);
      }
      if (EndLocation.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(EndLocation);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Location);
      }
      if (Agent != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Agent);
      }
      if (MinDuration != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(MinDuration);
      }
      if (MaxDuration != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(MaxDuration);
      }
      if (AverageDuration != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(AverageDuration);
      }
      if (DurationUncertainty != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(DurationUncertainty);
      }
      if (SuccessRate != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(SuccessRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Target.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Goal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Goal);
      }
      if (StartLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartLocation);
      }
      if (EndLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndLocation);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Agent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Agent);
      }
      if (MinDuration != 0F) {
        size += 1 + 4;
      }
      if (MaxDuration != 0F) {
        size += 1 + 4;
      }
      if (AverageDuration != 0F) {
        size += 1 + 4;
      }
      if (DurationUncertainty != 0F) {
        size += 1 + 4;
      }
      if (SuccessRate != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HRCTaskDTO other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Goal.Length != 0) {
        Goal = other.Goal;
      }
      if (other.StartLocation.Length != 0) {
        StartLocation = other.StartLocation;
      }
      if (other.EndLocation.Length != 0) {
        EndLocation = other.EndLocation;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Agent != 0) {
        Agent = other.Agent;
      }
      if (other.MinDuration != 0F) {
        MinDuration = other.MinDuration;
      }
      if (other.MaxDuration != 0F) {
        MaxDuration = other.MaxDuration;
      }
      if (other.AverageDuration != 0F) {
        AverageDuration = other.AverageDuration;
      }
      if (other.DurationUncertainty != 0F) {
        DurationUncertainty = other.DurationUncertainty;
      }
      if (other.SuccessRate != 0D) {
        SuccessRate = other.SuccessRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Target = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Id = input.ReadInt64();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            Goal = input.ReadString();
            break;
          }
          case 66: {
            StartLocation = input.ReadString();
            break;
          }
          case 74: {
            EndLocation = input.ReadString();
            break;
          }
          case 82: {
            Location = input.ReadString();
            break;
          }
          case 88: {
            Agent = (global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentType) input.ReadEnum();
            break;
          }
          case 101: {
            MinDuration = input.ReadFloat();
            break;
          }
          case 109: {
            MaxDuration = input.ReadFloat();
            break;
          }
          case 117: {
            AverageDuration = input.ReadFloat();
            break;
          }
          case 125: {
            DurationUncertainty = input.ReadFloat();
            break;
          }
          case 129: {
            SuccessRate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HRCModelDTO : pb::IMessage<HRCModelDTO> {
    private static readonly pb::MessageParser<HRCModelDTO> _parser = new pb::MessageParser<HRCModelDTO>(() => new HRCModelDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HRCModelDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HRCModelDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HRCModelDTO(HRCModelDTO other) : this() {
      horizon_ = other.horizon_;
      tasks_ = other.tasks_.Clone();
      robotTasks_ = other.robotTasks_.Clone();
      humanTasks_ = other.humanTasks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HRCModelDTO Clone() {
      return new HRCModelDTO(this);
    }

    /// <summary>Field number for the "horizon" field.</summary>
    public const int HorizonFieldNumber = 1;
    private float horizon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Horizon {
      get { return horizon_; }
      set {
        horizon_ = value;
      }
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(18, global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO.Parser);
    private readonly pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO> tasks_ = new pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO> Tasks {
      get { return tasks_; }
    }

    /// <summary>Field number for the "robotTasks" field.</summary>
    public const int RobotTasksFieldNumber = 3;
    private static readonly pb::FieldCodec<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO> _repeated_robotTasks_codec
        = pb::FieldCodec.ForMessage(26, global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO.Parser);
    private readonly pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO> robotTasks_ = new pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO> RobotTasks {
      get { return robotTasks_; }
    }

    /// <summary>Field number for the "humanTasks" field.</summary>
    public const int HumanTasksFieldNumber = 4;
    private static readonly pb::FieldCodec<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO> _repeated_humanTasks_codec
        = pb::FieldCodec.ForMessage(34, global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO.Parser);
    private readonly pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO> humanTasks_ = new pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO> HumanTasks {
      get { return humanTasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HRCModelDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HRCModelDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Horizon, other.Horizon)) return false;
      if(!tasks_.Equals(other.tasks_)) return false;
      if(!robotTasks_.Equals(other.robotTasks_)) return false;
      if(!humanTasks_.Equals(other.humanTasks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Horizon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Horizon);
      hash ^= tasks_.GetHashCode();
      hash ^= robotTasks_.GetHashCode();
      hash ^= humanTasks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Horizon != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Horizon);
      }
      tasks_.WriteTo(output, _repeated_tasks_codec);
      robotTasks_.WriteTo(output, _repeated_robotTasks_codec);
      humanTasks_.WriteTo(output, _repeated_humanTasks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Horizon != 0F) {
        size += 1 + 4;
      }
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      size += robotTasks_.CalculateSize(_repeated_robotTasks_codec);
      size += humanTasks_.CalculateSize(_repeated_humanTasks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HRCModelDTO other) {
      if (other == null) {
        return;
      }
      if (other.Horizon != 0F) {
        Horizon = other.Horizon;
      }
      tasks_.Add(other.tasks_);
      robotTasks_.Add(other.robotTasks_);
      humanTasks_.Add(other.humanTasks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Horizon = input.ReadFloat();
            break;
          }
          case 18: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
          case 26: {
            robotTasks_.AddEntriesFrom(input, _repeated_robotTasks_codec);
            break;
          }
          case 34: {
            humanTasks_.AddEntriesFrom(input, _repeated_humanTasks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GoalDTO : pb::IMessage<GoalDTO> {
    private static readonly pb::MessageParser<GoalDTO> _parser = new pb::MessageParser<GoalDTO>(() => new GoalDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoalDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoalDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoalDTO(GoalDTO other) : this() {
      goalId_ = other.goalId_;
      methods_ = other.methods_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoalDTO Clone() {
      return new GoalDTO(this);
    }

    /// <summary>Field number for the "goalId" field.</summary>
    public const int GoalIdFieldNumber = 1;
    private string goalId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoalId {
      get { return goalId_; }
      set {
        goalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "methods" field.</summary>
    public const int MethodsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::FSR.DigitalTwin.App.GRPC.Process.HRC.MethodDTO> _repeated_methods_codec
        = pb::FieldCodec.ForMessage(18, global::FSR.DigitalTwin.App.GRPC.Process.HRC.MethodDTO.Parser);
    private readonly pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.MethodDTO> methods_ = new pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.MethodDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.MethodDTO> Methods {
      get { return methods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoalDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoalDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GoalId != other.GoalId) return false;
      if(!methods_.Equals(other.methods_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GoalId.Length != 0) hash ^= GoalId.GetHashCode();
      hash ^= methods_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoalId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GoalId);
      }
      methods_.WriteTo(output, _repeated_methods_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoalId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoalId);
      }
      size += methods_.CalculateSize(_repeated_methods_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoalDTO other) {
      if (other == null) {
        return;
      }
      if (other.GoalId.Length != 0) {
        GoalId = other.GoalId;
      }
      methods_.Add(other.methods_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GoalId = input.ReadString();
            break;
          }
          case 18: {
            methods_.AddEntriesFrom(input, _repeated_methods_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionModalityDTO : pb::IMessage<InteractionModalityDTO> {
    private static readonly pb::MessageParser<InteractionModalityDTO> _parser = new pb::MessageParser<InteractionModalityDTO>(() => new InteractionModalityDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionModalityDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionModalityDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionModalityDTO(InteractionModalityDTO other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      function1_ = other.function1_;
      agent1_ = other.agent1_;
      function2_ = other.function2_;
      agent2_ = other.agent2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionModalityDTO Clone() {
      return new InteractionModalityDTO(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "function1" field.</summary>
    public const int Function1FieldNumber = 3;
    private string function1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Function1 {
      get { return function1_; }
      set {
        function1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "agent1" field.</summary>
    public const int Agent1FieldNumber = 4;
    private global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentType agent1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentType Agent1 {
      get { return agent1_; }
      set {
        agent1_ = value;
      }
    }

    /// <summary>Field number for the "function2" field.</summary>
    public const int Function2FieldNumber = 5;
    private string function2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Function2 {
      get { return function2_; }
      set {
        function2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "agent2" field.</summary>
    public const int Agent2FieldNumber = 6;
    private global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentType agent2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentType Agent2 {
      get { return agent2_; }
      set {
        agent2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionModalityDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionModalityDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Function1 != other.Function1) return false;
      if (Agent1 != other.Agent1) return false;
      if (Function2 != other.Function2) return false;
      if (Agent2 != other.Agent2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Function1.Length != 0) hash ^= Function1.GetHashCode();
      if (Agent1 != 0) hash ^= Agent1.GetHashCode();
      if (Function2.Length != 0) hash ^= Function2.GetHashCode();
      if (Agent2 != 0) hash ^= Agent2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Function1.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Function1);
      }
      if (Agent1 != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Agent1);
      }
      if (Function2.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Function2);
      }
      if (Agent2 != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Agent2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Function1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Function1);
      }
      if (Agent1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Agent1);
      }
      if (Function2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Function2);
      }
      if (Agent2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Agent2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionModalityDTO other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Function1.Length != 0) {
        Function1 = other.Function1;
      }
      if (other.Agent1 != 0) {
        Agent1 = other.Agent1;
      }
      if (other.Function2.Length != 0) {
        Function2 = other.Function2;
      }
      if (other.Agent2 != 0) {
        Agent2 = other.Agent2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityType) input.ReadEnum();
            break;
          }
          case 26: {
            Function1 = input.ReadString();
            break;
          }
          case 32: {
            Agent1 = (global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentType) input.ReadEnum();
            break;
          }
          case 42: {
            Function2 = input.ReadString();
            break;
          }
          case 48: {
            Agent2 = (global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskDTO : pb::IMessage<TaskDTO> {
    private static readonly pb::MessageParser<TaskDTO> _parser = new pb::MessageParser<TaskDTO>(() => new TaskDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDTO(TaskDTO other) : this() {
      taskId_ = other.taskId_;
      type_ = other.type_;
      subTasks_ = other.subTasks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDTO Clone() {
      return new TaskDTO(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subTasks" field.</summary>
    public const int SubTasksFieldNumber = 3;
    private static readonly pb::FieldCodec<global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO> _repeated_subTasks_codec
        = pb::FieldCodec.ForMessage(26, global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO.Parser);
    private readonly pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO> subTasks_ = new pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO> SubTasks {
      get { return subTasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Type != other.Type) return false;
      if(!subTasks_.Equals(other.subTasks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= subTasks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      subTasks_.WriteTo(output, _repeated_subTasks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += subTasks_.CalculateSize(_repeated_subTasks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskDTO other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      subTasks_.Add(other.subTasks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskType) input.ReadEnum();
            break;
          }
          case 26: {
            subTasks_.AddEntriesFrom(input, _repeated_subTasks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MethodDTO : pb::IMessage<MethodDTO> {
    private static readonly pb::MessageParser<MethodDTO> _parser = new pb::MessageParser<MethodDTO>(() => new MethodDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MethodDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodDTO(MethodDTO other) : this() {
      goalId_ = other.goalId_;
      graph_ = other.graph_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodDTO Clone() {
      return new MethodDTO(this);
    }

    /// <summary>Field number for the "goalId" field.</summary>
    public const int GoalIdFieldNumber = 1;
    private string goalId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoalId {
      get { return goalId_; }
      set {
        goalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graph" field.</summary>
    public const int GraphFieldNumber = 2;
    private static readonly pbc::MapField<string, global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO>.Codec _map_graph_codec
        = new pbc::MapField<string, global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO.Parser), 18);
    private readonly pbc::MapField<string, global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO> graph_ = new pbc::MapField<string, global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO> Graph {
      get { return graph_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MethodDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MethodDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GoalId != other.GoalId) return false;
      if (!Graph.Equals(other.Graph)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GoalId.Length != 0) hash ^= GoalId.GetHashCode();
      hash ^= Graph.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoalId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GoalId);
      }
      graph_.WriteTo(output, _map_graph_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoalId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoalId);
      }
      size += graph_.CalculateSize(_map_graph_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MethodDTO other) {
      if (other == null) {
        return;
      }
      if (other.GoalId.Length != 0) {
        GoalId = other.GoalId;
      }
      graph_.Add(other.graph_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GoalId = input.ReadString();
            break;
          }
          case 18: {
            graph_.AddEntriesFrom(input, _map_graph_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AgentDTO : pb::IMessage<AgentDTO> {
    private static readonly pb::MessageParser<AgentDTO> _parser = new pb::MessageParser<AgentDTO>(() => new AgentDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AgentDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCModelsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgentDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgentDTO(AgentDTO other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgentDTO Clone() {
      return new AgentDTO(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCAgentType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCAgentType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AgentDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AgentDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AgentDTO other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCAgentType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
