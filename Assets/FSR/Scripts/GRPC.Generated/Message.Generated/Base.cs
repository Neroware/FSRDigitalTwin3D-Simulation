// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FSR.DigitalTwin.App.GRPC {

  /// <summary>Holder for reflection information generated from Protos/Base.proto</summary>
  public static partial class BaseReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/Base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQcm90b3MvQmFzZS5wcm90bxIYRlNSLkRpZ2l0YWxUd2luLkFwcC5HUlBD",
            "IgcKBUVtcHR5Iv8CCgNVcmkSFAoMYWJzb2x1dGVQYXRoGAEgASgJEhMKC2Fi",
            "c29sdXRlVXJpGAIgASgJEhEKCWF1dGhvcml0eRgDIAEoCRITCgtkbnNTYWZl",
            "SG9zdBgEIAEoCRIMCgRob3N0GAUgASgJEg8KB2lkbkhvc3QYBiABKAkSFQoN",
            "aXNBYnNvbHV0ZVVyaRgHIAEoCBIVCg1pc0RlZmF1bHRQb3J0GAggASgIEg4K",
            "BmlzRmlsZRgJIAEoCBISCgppc0xvb3BiYWNrGAogASgIEg0KBWlzVW5jGAsg",
            "ASgIEhEKCWxvY2FsUGF0aBgMIAEoCRIWCg5vcmlnaW5hbFN0cmluZxgNIAEo",
            "CRIUCgxwYXRoQW5kUXVlcnkYDiABKAkSDAoEcG9ydBgPIAEoBRINCgVxdWVy",
            "eRgQIAEoCRIOCgZzY2hlbWUYESABKAkSEAoIc2VnbWVudHMYEiABKAkSEwoL",
            "dXNlckVzY2FwZWQYEyABKAkSEAoIdXNlckluZm8YFCABKAlCG6oCGEZTUi5E",
            "aWdpdGFsVHdpbi5BcHAuR1JQQ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Empty), global::FSR.DigitalTwin.App.GRPC.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FSR.DigitalTwin.App.GRPC.Uri), global::FSR.DigitalTwin.App.GRPC.Uri.Parser, new[]{ "AbsolutePath", "AbsoluteUri", "Authority", "DnsSafeHost", "Host", "IdnHost", "IsAbsoluteUri", "IsDefaultPort", "IsFile", "IsLoopback", "IsUnc", "LocalPath", "OriginalString", "PathAndQuery", "Port", "Query", "Scheme", "Segments", "UserEscaped", "UserInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.BaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Uri : pb::IMessage<Uri> {
    private static readonly pb::MessageParser<Uri> _parser = new pb::MessageParser<Uri>(() => new Uri());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Uri> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FSR.DigitalTwin.App.GRPC.BaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uri() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uri(Uri other) : this() {
      absolutePath_ = other.absolutePath_;
      absoluteUri_ = other.absoluteUri_;
      authority_ = other.authority_;
      dnsSafeHost_ = other.dnsSafeHost_;
      host_ = other.host_;
      idnHost_ = other.idnHost_;
      isAbsoluteUri_ = other.isAbsoluteUri_;
      isDefaultPort_ = other.isDefaultPort_;
      isFile_ = other.isFile_;
      isLoopback_ = other.isLoopback_;
      isUnc_ = other.isUnc_;
      localPath_ = other.localPath_;
      originalString_ = other.originalString_;
      pathAndQuery_ = other.pathAndQuery_;
      port_ = other.port_;
      query_ = other.query_;
      scheme_ = other.scheme_;
      segments_ = other.segments_;
      userEscaped_ = other.userEscaped_;
      userInfo_ = other.userInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uri Clone() {
      return new Uri(this);
    }

    /// <summary>Field number for the "absolutePath" field.</summary>
    public const int AbsolutePathFieldNumber = 1;
    private string absolutePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AbsolutePath {
      get { return absolutePath_; }
      set {
        absolutePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "absoluteUri" field.</summary>
    public const int AbsoluteUriFieldNumber = 2;
    private string absoluteUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AbsoluteUri {
      get { return absoluteUri_; }
      set {
        absoluteUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authority" field.</summary>
    public const int AuthorityFieldNumber = 3;
    private string authority_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Authority {
      get { return authority_; }
      set {
        authority_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dnsSafeHost" field.</summary>
    public const int DnsSafeHostFieldNumber = 4;
    private string dnsSafeHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DnsSafeHost {
      get { return dnsSafeHost_; }
      set {
        dnsSafeHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 5;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idnHost" field.</summary>
    public const int IdnHostFieldNumber = 6;
    private string idnHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdnHost {
      get { return idnHost_; }
      set {
        idnHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isAbsoluteUri" field.</summary>
    public const int IsAbsoluteUriFieldNumber = 7;
    private bool isAbsoluteUri_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbsoluteUri {
      get { return isAbsoluteUri_; }
      set {
        isAbsoluteUri_ = value;
      }
    }

    /// <summary>Field number for the "isDefaultPort" field.</summary>
    public const int IsDefaultPortFieldNumber = 8;
    private bool isDefaultPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDefaultPort {
      get { return isDefaultPort_; }
      set {
        isDefaultPort_ = value;
      }
    }

    /// <summary>Field number for the "isFile" field.</summary>
    public const int IsFileFieldNumber = 9;
    private bool isFile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFile {
      get { return isFile_; }
      set {
        isFile_ = value;
      }
    }

    /// <summary>Field number for the "isLoopback" field.</summary>
    public const int IsLoopbackFieldNumber = 10;
    private bool isLoopback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLoopback {
      get { return isLoopback_; }
      set {
        isLoopback_ = value;
      }
    }

    /// <summary>Field number for the "isUnc" field.</summary>
    public const int IsUncFieldNumber = 11;
    private bool isUnc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnc {
      get { return isUnc_; }
      set {
        isUnc_ = value;
      }
    }

    /// <summary>Field number for the "localPath" field.</summary>
    public const int LocalPathFieldNumber = 12;
    private string localPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalPath {
      get { return localPath_; }
      set {
        localPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "originalString" field.</summary>
    public const int OriginalStringFieldNumber = 13;
    private string originalString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalString {
      get { return originalString_; }
      set {
        originalString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pathAndQuery" field.</summary>
    public const int PathAndQueryFieldNumber = 14;
    private string pathAndQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathAndQuery {
      get { return pathAndQuery_; }
      set {
        pathAndQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 15;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 16;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scheme" field.</summary>
    public const int SchemeFieldNumber = 17;
    private string scheme_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scheme {
      get { return scheme_; }
      set {
        scheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "segments" field.</summary>
    public const int SegmentsFieldNumber = 18;
    private string segments_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Segments {
      get { return segments_; }
      set {
        segments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userEscaped" field.</summary>
    public const int UserEscapedFieldNumber = 19;
    private string userEscaped_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserEscaped {
      get { return userEscaped_; }
      set {
        userEscaped_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userInfo" field.</summary>
    public const int UserInfoFieldNumber = 20;
    private string userInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Uri);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Uri other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbsolutePath != other.AbsolutePath) return false;
      if (AbsoluteUri != other.AbsoluteUri) return false;
      if (Authority != other.Authority) return false;
      if (DnsSafeHost != other.DnsSafeHost) return false;
      if (Host != other.Host) return false;
      if (IdnHost != other.IdnHost) return false;
      if (IsAbsoluteUri != other.IsAbsoluteUri) return false;
      if (IsDefaultPort != other.IsDefaultPort) return false;
      if (IsFile != other.IsFile) return false;
      if (IsLoopback != other.IsLoopback) return false;
      if (IsUnc != other.IsUnc) return false;
      if (LocalPath != other.LocalPath) return false;
      if (OriginalString != other.OriginalString) return false;
      if (PathAndQuery != other.PathAndQuery) return false;
      if (Port != other.Port) return false;
      if (Query != other.Query) return false;
      if (Scheme != other.Scheme) return false;
      if (Segments != other.Segments) return false;
      if (UserEscaped != other.UserEscaped) return false;
      if (UserInfo != other.UserInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbsolutePath.Length != 0) hash ^= AbsolutePath.GetHashCode();
      if (AbsoluteUri.Length != 0) hash ^= AbsoluteUri.GetHashCode();
      if (Authority.Length != 0) hash ^= Authority.GetHashCode();
      if (DnsSafeHost.Length != 0) hash ^= DnsSafeHost.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (IdnHost.Length != 0) hash ^= IdnHost.GetHashCode();
      if (IsAbsoluteUri != false) hash ^= IsAbsoluteUri.GetHashCode();
      if (IsDefaultPort != false) hash ^= IsDefaultPort.GetHashCode();
      if (IsFile != false) hash ^= IsFile.GetHashCode();
      if (IsLoopback != false) hash ^= IsLoopback.GetHashCode();
      if (IsUnc != false) hash ^= IsUnc.GetHashCode();
      if (LocalPath.Length != 0) hash ^= LocalPath.GetHashCode();
      if (OriginalString.Length != 0) hash ^= OriginalString.GetHashCode();
      if (PathAndQuery.Length != 0) hash ^= PathAndQuery.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (Scheme.Length != 0) hash ^= Scheme.GetHashCode();
      if (Segments.Length != 0) hash ^= Segments.GetHashCode();
      if (UserEscaped.Length != 0) hash ^= UserEscaped.GetHashCode();
      if (UserInfo.Length != 0) hash ^= UserInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbsolutePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AbsolutePath);
      }
      if (AbsoluteUri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AbsoluteUri);
      }
      if (Authority.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Authority);
      }
      if (DnsSafeHost.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DnsSafeHost);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Host);
      }
      if (IdnHost.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IdnHost);
      }
      if (IsAbsoluteUri != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsAbsoluteUri);
      }
      if (IsDefaultPort != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsDefaultPort);
      }
      if (IsFile != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsFile);
      }
      if (IsLoopback != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsLoopback);
      }
      if (IsUnc != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsUnc);
      }
      if (LocalPath.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LocalPath);
      }
      if (OriginalString.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(OriginalString);
      }
      if (PathAndQuery.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(PathAndQuery);
      }
      if (Port != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Port);
      }
      if (Query.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Query);
      }
      if (Scheme.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Scheme);
      }
      if (Segments.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Segments);
      }
      if (UserEscaped.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(UserEscaped);
      }
      if (UserInfo.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(UserInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbsolutePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AbsolutePath);
      }
      if (AbsoluteUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AbsoluteUri);
      }
      if (Authority.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Authority);
      }
      if (DnsSafeHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DnsSafeHost);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (IdnHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdnHost);
      }
      if (IsAbsoluteUri != false) {
        size += 1 + 1;
      }
      if (IsDefaultPort != false) {
        size += 1 + 1;
      }
      if (IsFile != false) {
        size += 1 + 1;
      }
      if (IsLoopback != false) {
        size += 1 + 1;
      }
      if (IsUnc != false) {
        size += 1 + 1;
      }
      if (LocalPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalPath);
      }
      if (OriginalString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalString);
      }
      if (PathAndQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathAndQuery);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Query.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (Scheme.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Scheme);
      }
      if (Segments.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Segments);
      }
      if (UserEscaped.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserEscaped);
      }
      if (UserInfo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Uri other) {
      if (other == null) {
        return;
      }
      if (other.AbsolutePath.Length != 0) {
        AbsolutePath = other.AbsolutePath;
      }
      if (other.AbsoluteUri.Length != 0) {
        AbsoluteUri = other.AbsoluteUri;
      }
      if (other.Authority.Length != 0) {
        Authority = other.Authority;
      }
      if (other.DnsSafeHost.Length != 0) {
        DnsSafeHost = other.DnsSafeHost;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.IdnHost.Length != 0) {
        IdnHost = other.IdnHost;
      }
      if (other.IsAbsoluteUri != false) {
        IsAbsoluteUri = other.IsAbsoluteUri;
      }
      if (other.IsDefaultPort != false) {
        IsDefaultPort = other.IsDefaultPort;
      }
      if (other.IsFile != false) {
        IsFile = other.IsFile;
      }
      if (other.IsLoopback != false) {
        IsLoopback = other.IsLoopback;
      }
      if (other.IsUnc != false) {
        IsUnc = other.IsUnc;
      }
      if (other.LocalPath.Length != 0) {
        LocalPath = other.LocalPath;
      }
      if (other.OriginalString.Length != 0) {
        OriginalString = other.OriginalString;
      }
      if (other.PathAndQuery.Length != 0) {
        PathAndQuery = other.PathAndQuery;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.Scheme.Length != 0) {
        Scheme = other.Scheme;
      }
      if (other.Segments.Length != 0) {
        Segments = other.Segments;
      }
      if (other.UserEscaped.Length != 0) {
        UserEscaped = other.UserEscaped;
      }
      if (other.UserInfo.Length != 0) {
        UserInfo = other.UserInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AbsolutePath = input.ReadString();
            break;
          }
          case 18: {
            AbsoluteUri = input.ReadString();
            break;
          }
          case 26: {
            Authority = input.ReadString();
            break;
          }
          case 34: {
            DnsSafeHost = input.ReadString();
            break;
          }
          case 42: {
            Host = input.ReadString();
            break;
          }
          case 50: {
            IdnHost = input.ReadString();
            break;
          }
          case 56: {
            IsAbsoluteUri = input.ReadBool();
            break;
          }
          case 64: {
            IsDefaultPort = input.ReadBool();
            break;
          }
          case 72: {
            IsFile = input.ReadBool();
            break;
          }
          case 80: {
            IsLoopback = input.ReadBool();
            break;
          }
          case 88: {
            IsUnc = input.ReadBool();
            break;
          }
          case 98: {
            LocalPath = input.ReadString();
            break;
          }
          case 106: {
            OriginalString = input.ReadString();
            break;
          }
          case 114: {
            PathAndQuery = input.ReadString();
            break;
          }
          case 120: {
            Port = input.ReadInt32();
            break;
          }
          case 130: {
            Query = input.ReadString();
            break;
          }
          case 138: {
            Scheme = input.ReadString();
            break;
          }
          case 146: {
            Segments = input.ReadString();
            break;
          }
          case 154: {
            UserEscaped = input.ReadString();
            break;
          }
          case 162: {
            UserInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
