// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Services/HRCProcessSimulationService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService {
  public static partial class HRCProcessSimulationService
  {
    static readonly string __ServiceName = "FSR.DigitalTwin.App.GRPC.HRCProcessSimulationService";

    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.GetSimulationContextRequest> __Marshaller_FSR_DigitalTwin_App_GRPC_GetSimulationContextRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.GetSimulationContextRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationContextDTO> __Marshaller_FSR_DigitalTwin_App_GRPC_HRCProcessSimulationContextDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationContextDTO.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationLogDTO> __Marshaller_FSR_DigitalTwin_App_GRPC_HRCProcessSimulationLogDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationLogDTO.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Empty> __Marshaller_FSR_DigitalTwin_App_GRPC_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO> __Marshaller_FSR_DigitalTwin_App_GRPC_GoalDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO> __Marshaller_FSR_DigitalTwin_App_GRPC_HRCTaskDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO> __Marshaller_FSR_DigitalTwin_App_GRPC_FunctionPropertyDataDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO> __Marshaller_FSR_DigitalTwin_App_GRPC_FunctionObjectDataDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO> __Marshaller_FSR_DigitalTwin_App_GRPC_TaskDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO> __Marshaller_FSR_DigitalTwin_App_GRPC_InteractionModalityDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentDTO> __Marshaller_FSR_DigitalTwin_App_GRPC_AgentDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentDTO.Parser.ParseFrom);

    static readonly grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.GetSimulationContextRequest, global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationContextDTO> __Method_GetSimulationContext = new grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.GetSimulationContextRequest, global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationContextDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSimulationContext",
        __Marshaller_FSR_DigitalTwin_App_GRPC_GetSimulationContextRequest,
        __Marshaller_FSR_DigitalTwin_App_GRPC_HRCProcessSimulationContextDTO);

    static readonly grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationLogDTO, global::FSR.DigitalTwin.App.GRPC.Empty> __Method_SendSimulationLog = new grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationLogDTO, global::FSR.DigitalTwin.App.GRPC.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendSimulationLog",
        __Marshaller_FSR_DigitalTwin_App_GRPC_HRCProcessSimulationLogDTO,
        __Marshaller_FSR_DigitalTwin_App_GRPC_Empty);

    static readonly grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO> __Method_GetProcessDecomposition = new grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProcessDecomposition",
        __Marshaller_FSR_DigitalTwin_App_GRPC_GoalDTO,
        __Marshaller_FSR_DigitalTwin_App_GRPC_GoalDTO);

    static readonly grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO> __Method_GetFunctionPropertyData = new grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFunctionPropertyData",
        __Marshaller_FSR_DigitalTwin_App_GRPC_HRCTaskDTO,
        __Marshaller_FSR_DigitalTwin_App_GRPC_FunctionPropertyDataDTO);

    static readonly grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO> __Method_GetFunctionObjectData = new grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFunctionObjectData",
        __Marshaller_FSR_DigitalTwin_App_GRPC_HRCTaskDTO,
        __Marshaller_FSR_DigitalTwin_App_GRPC_FunctionObjectDataDTO);

    static readonly grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO> __Method_GetInteractionModality = new grpc::Method<global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInteractionModality",
        __Marshaller_FSR_DigitalTwin_App_GRPC_TaskDTO,
        __Marshaller_FSR_DigitalTwin_App_GRPC_InteractionModalityDTO);

    static readonly grpc::Method<global::FSR.DigitalTwin.App.GRPC.Empty, global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentDTO> __Method_GetAllAgents = new grpc::Method<global::FSR.DigitalTwin.App.GRPC.Empty, global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentDTO>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllAgents",
        __Marshaller_FSR_DigitalTwin_App_GRPC_Empty,
        __Marshaller_FSR_DigitalTwin_App_GRPC_AgentDTO);

    static readonly grpc::Method<global::FSR.DigitalTwin.App.GRPC.Empty, global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO> __Method_GetAllGoals = new grpc::Method<global::FSR.DigitalTwin.App.GRPC.Empty, global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllGoals",
        __Marshaller_FSR_DigitalTwin_App_GRPC_Empty,
        __Marshaller_FSR_DigitalTwin_App_GRPC_GoalDTO);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of HRCProcessSimulationService</summary>
    [grpc::BindServiceMethod(typeof(HRCProcessSimulationService), "BindService")]
    public abstract partial class HRCProcessSimulationServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationContextDTO> GetSimulationContext(global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.GetSimulationContextRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::FSR.DigitalTwin.App.GRPC.Empty> SendSimulationLog(global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationLogDTO request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO> GetProcessDecomposition(global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// rpc GetProcessDependencies (GoalDTO) returns (TaskDTO);
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO> GetFunctionPropertyData(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO> GetFunctionObjectData(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO> GetInteractionModality(global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetAllAgents(global::FSR.DigitalTwin.App.GRPC.Empty request, grpc::IServerStreamWriter<global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentDTO> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetAllGoals(global::FSR.DigitalTwin.App.GRPC.Empty request, grpc::IServerStreamWriter<global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HRCProcessSimulationService</summary>
    public partial class HRCProcessSimulationServiceClient : grpc::ClientBase<HRCProcessSimulationServiceClient>
    {
      /// <summary>Creates a new client for HRCProcessSimulationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public HRCProcessSimulationServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HRCProcessSimulationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public HRCProcessSimulationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected HRCProcessSimulationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected HRCProcessSimulationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationContextDTO GetSimulationContext(global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.GetSimulationContextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSimulationContext(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationContextDTO GetSimulationContext(global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.GetSimulationContextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSimulationContext, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationContextDTO> GetSimulationContextAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.GetSimulationContextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSimulationContextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationContextDTO> GetSimulationContextAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.GetSimulationContextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSimulationContext, null, options, request);
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Empty SendSimulationLog(global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationLogDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendSimulationLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Empty SendSimulationLog(global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationLogDTO request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendSimulationLog, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Empty> SendSimulationLogAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationLogDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendSimulationLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Empty> SendSimulationLogAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationLogDTO request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendSimulationLog, null, options, request);
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO GetProcessDecomposition(global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProcessDecomposition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO GetProcessDecomposition(global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProcessDecomposition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO> GetProcessDecompositionAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProcessDecompositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO> GetProcessDecompositionAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProcessDecomposition, null, options, request);
      }
      /// <summary>
      /// rpc GetProcessDependencies (GoalDTO) returns (TaskDTO);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO GetFunctionPropertyData(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFunctionPropertyData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc GetProcessDependencies (GoalDTO) returns (TaskDTO);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO GetFunctionPropertyData(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFunctionPropertyData, null, options, request);
      }
      /// <summary>
      /// rpc GetProcessDependencies (GoalDTO) returns (TaskDTO);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO> GetFunctionPropertyDataAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFunctionPropertyDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc GetProcessDependencies (GoalDTO) returns (TaskDTO);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO> GetFunctionPropertyDataAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFunctionPropertyData, null, options, request);
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO GetFunctionObjectData(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFunctionObjectData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO GetFunctionObjectData(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFunctionObjectData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO> GetFunctionObjectDataAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFunctionObjectDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO> GetFunctionObjectDataAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFunctionObjectData, null, options, request);
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO GetInteractionModality(global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInteractionModality(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO GetInteractionModality(global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInteractionModality, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO> GetInteractionModalityAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInteractionModalityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO> GetInteractionModalityAsync(global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInteractionModality, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentDTO> GetAllAgents(global::FSR.DigitalTwin.App.GRPC.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllAgents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentDTO> GetAllAgents(global::FSR.DigitalTwin.App.GRPC.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllAgents, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO> GetAllGoals(global::FSR.DigitalTwin.App.GRPC.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllGoals(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO> GetAllGoals(global::FSR.DigitalTwin.App.GRPC.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllGoals, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override HRCProcessSimulationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HRCProcessSimulationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(HRCProcessSimulationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetSimulationContext, serviceImpl.GetSimulationContext)
          .AddMethod(__Method_SendSimulationLog, serviceImpl.SendSimulationLog)
          .AddMethod(__Method_GetProcessDecomposition, serviceImpl.GetProcessDecomposition)
          .AddMethod(__Method_GetFunctionPropertyData, serviceImpl.GetFunctionPropertyData)
          .AddMethod(__Method_GetFunctionObjectData, serviceImpl.GetFunctionObjectData)
          .AddMethod(__Method_GetInteractionModality, serviceImpl.GetInteractionModality)
          .AddMethod(__Method_GetAllAgents, serviceImpl.GetAllAgents)
          .AddMethod(__Method_GetAllGoals, serviceImpl.GetAllGoals).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, HRCProcessSimulationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetSimulationContext, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.GetSimulationContextRequest, global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationContextDTO>(serviceImpl.GetSimulationContext));
      serviceBinder.AddMethod(__Method_SendSimulationLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FSR.DigitalTwin.App.GRPC.Process.HRC.Services.HRCProcessSimulationService.HRCProcessSimulationLogDTO, global::FSR.DigitalTwin.App.GRPC.Empty>(serviceImpl.SendSimulationLog));
      serviceBinder.AddMethod(__Method_GetProcessDecomposition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO>(serviceImpl.GetProcessDecomposition));
      serviceBinder.AddMethod(__Method_GetFunctionPropertyData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionPropertyDataDTO>(serviceImpl.GetFunctionPropertyData));
      serviceBinder.AddMethod(__Method_GetFunctionObjectData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FSR.DigitalTwin.App.GRPC.Process.HRC.HRCTaskDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.FunctionObjectDataDTO>(serviceImpl.GetFunctionObjectData));
      serviceBinder.AddMethod(__Method_GetInteractionModality, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FSR.DigitalTwin.App.GRPC.Process.HRC.TaskDTO, global::FSR.DigitalTwin.App.GRPC.Process.HRC.InteractionModalityDTO>(serviceImpl.GetInteractionModality));
      serviceBinder.AddMethod(__Method_GetAllAgents, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::FSR.DigitalTwin.App.GRPC.Empty, global::FSR.DigitalTwin.App.GRPC.Process.HRC.AgentDTO>(serviceImpl.GetAllAgents));
      serviceBinder.AddMethod(__Method_GetAllGoals, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::FSR.DigitalTwin.App.GRPC.Empty, global::FSR.DigitalTwin.App.GRPC.Process.HRC.GoalDTO>(serviceImpl.GetAllGoals));
    }

  }
}
#endregion
