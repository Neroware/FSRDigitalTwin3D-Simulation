// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Services/DigitalTwinClientConnectionService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService {
  public static partial class DigitalTwinClientConnectionService
  {
    static readonly string __ServiceName = "FSR.DigitalTwin.App.GRPC.DigitalTwinClientConnectionService";

    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ServerNotification> __Marshaller_FSR_DigitalTwin_App_GRPC_ServerNotification = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ServerNotification.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ClientNotification> __Marshaller_FSR_DigitalTwin_App_GRPC_ClientNotification = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ClientNotification.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage> __Marshaller_FSR_DigitalTwin_App_GRPC_TestMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage.Parser.ParseFrom);

    static readonly grpc::Method<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ServerNotification, global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ClientNotification> __Method_Connect = new grpc::Method<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ServerNotification, global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ClientNotification>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Connect",
        __Marshaller_FSR_DigitalTwin_App_GRPC_ServerNotification,
        __Marshaller_FSR_DigitalTwin_App_GRPC_ClientNotification);

    static readonly grpc::Method<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage, global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage> __Method_GetTestMessage = new grpc::Method<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage, global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTestMessage",
        __Marshaller_FSR_DigitalTwin_App_GRPC_TestMessage,
        __Marshaller_FSR_DigitalTwin_App_GRPC_TestMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.DigitalTwinClientConnectionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DigitalTwinClientConnectionService</summary>
    [grpc::BindServiceMethod(typeof(DigitalTwinClientConnectionService), "BindService")]
    public abstract partial class DigitalTwinClientConnectionServiceBase
    {
      public virtual global::System.Threading.Tasks.Task Connect(grpc::IAsyncStreamReader<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ServerNotification> requestStream, grpc::IServerStreamWriter<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ClientNotification> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage> GetTestMessage(global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DigitalTwinClientConnectionService</summary>
    public partial class DigitalTwinClientConnectionServiceClient : grpc::ClientBase<DigitalTwinClientConnectionServiceClient>
    {
      /// <summary>Creates a new client for DigitalTwinClientConnectionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DigitalTwinClientConnectionServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DigitalTwinClientConnectionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DigitalTwinClientConnectionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DigitalTwinClientConnectionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DigitalTwinClientConnectionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncDuplexStreamingCall<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ServerNotification, global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ClientNotification> Connect(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ServerNotification, global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ClientNotification> Connect(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Connect, null, options);
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage GetTestMessage(global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage GetTestMessage(global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTestMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage> GetTestMessageAsync(global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage> GetTestMessageAsync(global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTestMessage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DigitalTwinClientConnectionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DigitalTwinClientConnectionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DigitalTwinClientConnectionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_GetTestMessage, serviceImpl.GetTestMessage).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DigitalTwinClientConnectionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Connect, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ServerNotification, global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.ClientNotification>(serviceImpl.Connect));
      serviceBinder.AddMethod(__Method_GetTestMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage, global::FSR.DigitalTwin.App.GRPC.Services.DigitalTwinClientConnectionService.TestMessage>(serviceImpl.GetTestMessage));
    }

  }
}
#endregion
